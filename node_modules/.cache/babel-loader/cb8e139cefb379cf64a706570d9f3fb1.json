{"ast":null,"code":"var _jsxFileName = \"D:\\\\Business\\\\Programming\\\\react_lists\\\\src\\\\pages\\\\ListTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { TreeCrawl } from '../components/TreeCrawl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListTree = () => {\n  _s();\n\n  const {\n    items\n  } = useContext(AppContext);\n  const topLevel = [...items].filter(i => null === i.parent); // const tree = (parent, items, found) => {\n  //     for(var i in items) {\n  //         if (items[i].parent === parent && ! found.includes(items[i]) ) {\n  //             found.push(items[i]);\n  //             tree(items[i].id, items, found)\n  //         } \n  //     }\n  //     return found\n  // }\n  // const fullTree = tree(null, items, [])\n  // var nestedItems = {\n  //     1:{title:'bla',children:{\n  //         3:{title:'bla'},\n  //         5:{title:'blahaha'}}\n  //     },\n  //     2:{title:'bla',children:{}}\n  // }\n\n  const build = () => {\n    const added = [];\n\n    const crawl = parent => {\n      const found = {};\n\n      for (var i in items) {\n        var item = items[i];\n\n        if (parent === item.parent && !added.includes(item.id)) {\n          console.log('item', item.title);\n          added.push(item.id);\n          found[item.id] = {\n            title: item.title\n          };\n          console.log('found', found);\n          var children = crawl(item.id);\n          console.log('children crawl', children);\n\n          if (Object.keys({}).length > 0) {\n            found[item.id].children = children;\n            console.log('children', children);\n          }\n\n          console.log('children found', found);\n        }\n      }\n\n      return found;\n    };\n\n    return crawl(null);\n  };\n\n  console.log('build', build());\n  var mappedItems = [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: topLevel.map(item => {\n        if (item.parent === null && !mappedItems.includes(item.id)) {\n          mappedItems.push(item.id);\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: item.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(TreeCrawl, {\n              mappedItems: mappedItems,\n              parent: item,\n              items: items\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 25\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this);\n        } else {\n          return '';\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ListTree, \"rJqdXWcK+J1DNZMA7+YqMqgizNU=\");\n\n_c = ListTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListTree\");","map":{"version":3,"sources":["D:/Business/Programming/react_lists/src/pages/ListTree.js"],"names":["React","useContext","AppContext","TreeCrawl","ListTree","items","topLevel","filter","i","parent","build","added","crawl","found","item","includes","id","console","log","title","push","children","Object","keys","length","mappedItems","map"],"mappings":"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","sourcesContent":["import React, {useContext} from 'react'\r\nimport { AppContext } from '../context/AppContext';\r\nimport { TreeCrawl } from '../components/TreeCrawl';\r\n\r\nexport const ListTree = () => {\r\n    const { items } = useContext(AppContext);\r\n\r\n    const topLevel = [...items].filter(i => null === i.parent)\r\n\r\n    // const tree = (parent, items, found) => {\r\n    //     for(var i in items) {\r\n    //         if (items[i].parent === parent && ! found.includes(items[i]) ) {\r\n    //             found.push(items[i]);\r\n    //             tree(items[i].id, items, found)\r\n    //         } \r\n    //     }\r\n    //     return found\r\n    // }\r\n    // const fullTree = tree(null, items, [])\r\n\r\n    // var nestedItems = {\r\n    //     1:{title:'bla',children:{\r\n    //         3:{title:'bla'},\r\n    //         5:{title:'blahaha'}}\r\n    //     },\r\n    //     2:{title:'bla',children:{}}\r\n    // }\r\n    \r\n    const build = () => {\r\n        const added = []\r\n        const crawl = (parent) => {\r\n            const found = {}\r\n            for ( var i in items) {\r\n                var item = items[i];\r\n                if (parent === item.parent && ! added.includes(item.id)) {\r\n                    console.log('item',item.title)\r\n                    added.push(item.id);\r\n                    found[item.id] = {title:item.title}\r\n                    console.log('found',found)\r\n                    var children = crawl(item.id)\r\n                    console.log('children crawl',children)\r\n                    if (Object.keys({}).length > 0) {found[item.id].children = children;  console.log('children',children)}\r\n                    console.log('children found',found)                   \r\n                } \r\n            }\r\n            return found\r\n        }\r\n        return crawl(null)\r\n    }\r\n    console.log('build',build())\r\n\r\n    var mappedItems = []\r\n    return (\r\n        <div className=\"container\">\r\n            <ul>\r\n            {topLevel.map((item)=>{\r\n                if (item.parent === null && ! mappedItems.includes(item.id)) {\r\n                    \r\n                    mappedItems.push(item.id)\r\n                    return (\r\n                    <li key={item.id}>\r\n                        <span>{item.title}</span>\r\n                        <TreeCrawl mappedItems={mappedItems} parent={item} items={items} />\r\n                    </li>)\r\n                } else  {\r\n                    return ('')\r\n                }                \r\n            })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
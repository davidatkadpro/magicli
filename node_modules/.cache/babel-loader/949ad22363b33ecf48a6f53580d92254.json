{"ast":null,"code":"var _jsxFileName = \"D:\\\\Business\\\\Programming\\\\react_lists\\\\src\\\\pages\\\\ListTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { TreeCrawl } from '../components/TreeCrawl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListTree = () => {\n  _s();\n\n  const {\n    items\n  } = useContext(AppContext);\n  const topLevel = [...items].filter(i => null === i.parent);\n\n  const tree = (parent, items, found) => {\n    for (var i in items) {\n      if (items[i].parent === parent && !found.includes(items[i])) {\n        found.push(items[i]);\n        tree(items[i].id, items, found);\n      }\n    }\n\n    return found;\n  };\n\n  const fullTree = tree(null, items, []);\n  var mappedItems = [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: topLevel.map(item => {\n        if (item.parent === null && !mappedItems.includes(item.id)) {\n          console.log('topLevel', item.id);\n          mappedItems.push(item.id);\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: item.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(TreeCrawl, {\n              mappedItems: mappedItems,\n              parent: item,\n              items: items\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 25\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 21\n          }, this);\n        } else {\n          return '';\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ListTree, \"rJqdXWcK+J1DNZMA7+YqMqgizNU=\");\n\n_c = ListTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListTree\");","map":{"version":3,"sources":["D:/Business/Programming/react_lists/src/pages/ListTree.js"],"names":["React","useContext","AppContext","TreeCrawl","ListTree","items","topLevel","filter","i","parent","tree","found","includes","push","id","fullTree","mappedItems","map","item","console","log","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,SAAT,QAA0B,yBAA1B;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAC1B,QAAM;AAAEC,IAAAA;AAAF,MAAYJ,UAAU,CAACC,UAAD,CAA5B;AAEA,QAAMI,QAAQ,GAAG,CAAC,GAAGD,KAAJ,EAAWE,MAAX,CAAkBC,CAAC,IAAI,SAASA,CAAC,CAACC,MAAlC,CAAjB;;AAEA,QAAMC,IAAI,GAAG,CAACD,MAAD,EAASJ,KAAT,EAAgBM,KAAhB,KAA0B;AACnC,SAAI,IAAIH,CAAR,IAAaH,KAAb,EAAoB;AAChB,UAAIA,KAAK,CAACG,CAAD,CAAL,CAASC,MAAT,KAAoBA,MAApB,IAA8B,CAAEE,KAAK,CAACC,QAAN,CAAeP,KAAK,CAACG,CAAD,CAApB,CAApC,EAA+D;AAC3DG,QAAAA,KAAK,CAACE,IAAN,CAAWR,KAAK,CAACG,CAAD,CAAhB;AACAE,QAAAA,IAAI,CAACL,KAAK,CAACG,CAAD,CAAL,CAASM,EAAV,EAAcT,KAAd,EAAqBM,KAArB,CAAJ;AACH;AACJ;;AACD,WAAOA,KAAP;AACH,GARD;;AASA,QAAMI,QAAQ,GAAGL,IAAI,CAAC,IAAD,EAAOL,KAAP,EAAc,EAAd,CAArB;AAEA,MAAIW,WAAW,GAAG,EAAlB;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BACI;AAAA,gBACCV,QAAQ,CAACW,GAAT,CAAcC,IAAD,IAAQ;AAClB,YAAIA,IAAI,CAACT,MAAL,KAAgB,IAAhB,IAAwB,CAAEO,WAAW,CAACJ,QAAZ,CAAqBM,IAAI,CAACJ,EAA1B,CAA9B,EAA6D;AACzDK,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBF,IAAI,CAACJ,EAA5B;AACAE,UAAAA,WAAW,CAACH,IAAZ,CAAiBK,IAAI,CAACJ,EAAtB;AACA,8BACA;AAAA,oCACI;AAAA,wBAAOI,IAAI,CAACG;AAAZ;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,SAAD;AAAW,cAAA,WAAW,EAAEL,WAAxB;AAAqC,cAAA,MAAM,EAAEE,IAA7C;AAAmD,cAAA,KAAK,EAAEb;AAA1D;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA,aAASa,IAAI,CAACJ,EAAd;AAAA;AAAA;AAAA;AAAA,kBADA;AAKH,SARD,MAQQ;AACJ,iBAAQ,EAAR;AACH;AACJ,OAZA;AADD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH,CApCM;;GAAMV,Q;;KAAAA,Q","sourcesContent":["import React, {useContext} from 'react'\r\nimport { AppContext } from '../context/AppContext';\r\nimport { TreeCrawl } from '../components/TreeCrawl';\r\n\r\nexport const ListTree = () => {\r\n    const { items } = useContext(AppContext);\r\n\r\n    const topLevel = [...items].filter(i => null === i.parent)\r\n\r\n    const tree = (parent, items, found) => {\r\n        for(var i in items) {\r\n            if (items[i].parent === parent && ! found.includes(items[i]) ) {\r\n                found.push(items[i]);\r\n                tree(items[i].id, items, found)\r\n            } \r\n        }\r\n        return found\r\n    }\r\n    const fullTree = tree(null, items, [])\r\n\r\n    var mappedItems = []\r\n    return (\r\n        <div className=\"container\">\r\n            <ul>\r\n            {topLevel.map((item)=>{\r\n                if (item.parent === null && ! mappedItems.includes(item.id)) {\r\n                    console.log('topLevel',item.id)\r\n                    mappedItems.push(item.id)\r\n                    return (\r\n                    <li key={item.id}>\r\n                        <span>{item.title}</span>\r\n                        <TreeCrawl mappedItems={mappedItems} parent={item} items={items} />\r\n                    </li>)\r\n                } else  {\r\n                    return ('')\r\n                }                \r\n            })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}